spring.datasource.url=${DBURL}
spring.datasource.username=${DBUSER}
spring.datasource.password=${DBPASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver


recaptcha.private.key=${RECAPTCHA_PRIVATE_KEY}
recaptcha.public.key=${RECAPTCHA_PUBLIC_KEY}

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${EMAIL_USER}
spring.mail.password=${EMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


currentlyDomainClient=${DOMAIN_CLIENT}
expiryCaptchaForUser=60

security.jwt.token.secret-key=${JWT_SECRET_KEY}
security.jwt.token.expire=3600000


sql.accRoleRep.create = INSERT INTO account_role(account_role_name) VALUES(?);
sql.roleRep.delete = DELETE FROM account_role WHERE account_role_name=?;

sql.account.create=INSERT INTO account(id, first_name,last_name,birth_date,gender,img_url, account_role, status) \
                        VALUES (?,?, ?, ?,?::user_gender,'',?::account_roles, default)
sql.account.findById=SELECT * FROM account WHERE id=?
sql.account.findByEmail=SELECT a.* FROM credentials c JOIN account a ON c.id=a.id WHERE c.email=?
sql.account.updateModerStatus=UPDATE account SET status = ? where id = ?
sql.account.updateAccData=UPDATE account \
                        SET first_name = ?, last_name = ?, birth_date = ?, img_url = ?, gender = ?::user_gender \
                        WHERE id = ?



sql.account.findAllBySearchDesc=SELECT id, first_name, last_name, img_url FROM account WHERE \
                        account_role = ?::account_roles AND \
                        ((first_name ILIKE CONCAT('%', ?, '%')) OR \
                        (last_name ILIKE CONCAT('%', ?, '%'))) AND \
                        gender::text ILIKE CONCAT('%', ?, '%') AND \
                        status::text ILIKE CONCAT('%', ?, '%') \
                        ORDER BY first_name DESC, last_name DESC LIMIT ? OFFSET ?

sql.account.findAllBySearchAsc=SELECT id, first_name, last_name, img_url FROM account WHERE \
                        account_role = ?::account_roles AND \
                        ((first_name ILIKE CONCAT('%', ?, '%')) OR \
                        (last_name ILIKE CONCAT('%', ?, '%'))) AND \
                        gender::text ILIKE CONCAT('%', ?, '%') AND \
                        status::text ILIKE CONCAT('%', ?, '%') \
                        ORDER BY first_name ASC, last_name ASC LIMIT ? OFFSET ?


sql.account.countAllBySearch=SELECT COUNT(*) FROM account WHERE \
                        account_role = ?::account_roles AND \
                        ((first_name ILIKE CONCAT('%', ?, '%')) OR \
                        (last_name ILIKE CONCAT('%', ?, '%'))) AND \
                        gender::text ILIKE CONCAT('%', ?, '%') AND \
                        status::text ILIKE CONCAT('%', ?, '%') 



sql.credentials.create=INSERT INTO credentials(id,email,password) VALUES(?,?,?)
sql.credentials.update=UPDATE credentials SET password=? WHERE email=?
sql.credentials.findById=SELECT * FROM credentials WHERE id=?
sql.credentials.findByEmail=SELECT * FROM credentials WHERE email=?
sql.credentials.insertJwtToken=UPDATE credentials SET access_token=? WHERE email=?
sql.credentials.countEmailUsages=select count(email) from credentials where email = ?


sql.passwordResetToken.create=INSERT INTO password_reset_token(reset_token, expiry_date, account_id, active) VALUES(?,?,?,?)
sql.passwordResetToken.findByAccountId=SELECT * FROM password_reset_token WHERE account_id = ?
sql.passwordResetToken.disableAllActiveSessionResetLink=UPDATE password_reset_token SET active=false WHERE account_id=? AND active=true;
sql.passwordResetToken.findByToken=SELECT * FROM password_reset_token WHERE reset_token=?
sql.passwordResetToken.findById=SELECT * FROM password_reset_token WHERE id = ?
sql.passwordResetToken.update=UPDATE password_reset_token SET reset_token=?,expiry_date=?,account_id=?,active=? WHERE id = ?


sql.unconfirmedModer.create=INSERT INTO unconfirmed_moderator(moder_token, expiry_date, email, first_name, last_name, birth_date, gender) \
                        VALUES (?, ?, ?, ?, ?, ?, ?::user_gender)
sql.unconfirmedModer.getByToken=SELECT * FROM unconfirmed_moderator WHERE moder_token = ?
sql.unconfirmedModer.getLatestExpiryDate=SELECT max(expiry_date) FROM unconfirmed_moderator where email = ?

sql.wrongAttemptLogin.create=INSERT INTO wrong_attempt_login(ip,expiry_time,count_wrong_attempts) values(?, ?, ?)
sql.wrongAttemptLogin.update=UPDATE wrong_attempt_login SET ip=?,expiry_time=?,count_wrong_attempts=? WHERE id=?
sql.wrongAttemptLogin.delete=DELETE FROM wrong_attempt_login WHERE id=?
sql.wrongAttemptLogin.findById=SELECT * FROM wrong_attempt_login WHERE id=?
sql.wrongAttemptLogin.findByIpAndTime=SELECT * FROM wrong_attempt_login WHERE ip=? AND expiry_time > ?